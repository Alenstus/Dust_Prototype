//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/PROJECTS/Active/Dust/Dust\Dust.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dust.Language {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DustParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, WhiteSpace=33, LineTerminator=34, SemiColon=35, MultiLineComment=36, 
		SingleLineComment=37, Function=38, Identifier=39, PreProcessorDirective=40, 
		FloatLiteral=41, IntLiteral=42, StringLiteral=43;
	public const int
		RULE_module = 0, RULE_statement = 1, RULE_expression = 2, RULE_declaration = 3, 
		RULE_returnStatement = 4, RULE_expressionStatement = 5, RULE_propertyDeclaration = 6, 
		RULE_functionDeclarationBase = 7, RULE_functionBodyBase = 8, RULE_functionBody = 9, 
		RULE_functionDeclaration = 10, RULE_memberName = 11, RULE_functionName = 12, 
		RULE_functionModifier = 13, RULE_functionParameterList = 14, RULE_functionFragmentator = 15, 
		RULE_functionParameter = 16, RULE_parameterName = 17, RULE_identifierName = 18, 
		RULE_literal = 19, RULE_arrayLiteral = 20, RULE_parameters = 21, RULE_parameter = 22, 
		RULE_eos = 23;
	public static readonly string[] ruleNames = {
		"module", "statement", "expression", "declaration", "returnStatement", 
		"expressionStatement", "propertyDeclaration", "functionDeclarationBase", 
		"functionBodyBase", "functionBody", "functionDeclaration", "memberName", 
		"functionName", "functionModifier", "functionParameterList", "functionFragmentator", 
		"functionParameter", "parameterName", "identifierName", "literal", "arrayLiteral", 
		"parameters", "parameter", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'typeof'", "'='", "'.'", "'+'", "'++'", "'-'", "'--'", 
		"'*'", "'**'", "'/'", "'//'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
		"'!'", "'let'", "'mut'", "'return'", "'{'", "'}'", "'public'", "'private'", 
		"','", "'true'", "'false'", "'['", "']'", null, null, "';'", null, null, 
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "WhiteSpace", "LineTerminator", 
		"SemiColon", "MultiLineComment", "SingleLineComment", "Function", "Identifier", 
		"PreProcessorDirective", "FloatLiteral", "IntLiteral", "StringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dust.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DustParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DustParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DustParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ModuleContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << T__7) | (1L << T__19) | (1L << T__20) | (1L << T__22) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << Identifier) | (1L << FloatLiteral) | (1L << IntLiteral) | (1L << StringLiteral))) != 0)) {
				{
				{
				State = 48; statement();
				State = 49; eos();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; propertyDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; expressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58; functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59; returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BangUnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BangUnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterBangUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitBangUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBangUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeOfExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeOfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterNotEqualBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitNotEqualBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BiggerEqualBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BiggerEqualBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterBiggerEqualBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitBiggerEqualBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBiggerEqualBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotMemberExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DotMemberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterDotMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitDotMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterDivisionBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitDivisionBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationUnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultiplicationUnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterMultiplicationUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitMultiplicationUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : ExpressionContext {
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionUnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AdditionUnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterAdditionUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitAdditionUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstractionUnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubstractionUnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterSubstractionUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitSubstractionUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstractionUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterEqualBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitEqualBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BiggerBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BiggerBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterBiggerBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitBiggerBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBiggerBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterGroupExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitGroupExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterMultiplicationBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitMultiplicationBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SmallerBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterSmallerBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitSmallerBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionUnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DivisionUnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterDivisionUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitDivisionUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterAdditionBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitAdditionBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerEqualBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SmallerEqualBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterSmallerEqualBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitSmallerEqualBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEqualBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstractionBinaryExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubstractionBinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterSubstractionBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitSubstractionBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstractionBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new GroupExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 63; Match(T__0);
				State = 64; expression(0);
				State = 65; Match(T__1);
				}
				break;
			case T__2:
				{
				_localctx = new TypeOfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67; Match(T__2);
				{
				State = 68; expression(0);
				}
				}
				break;
			case T__30:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; arrayLiteral();
				}
				break;
			case Identifier:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70; identifierName();
				}
				break;
			case T__19:
				{
				_localctx = new BangUnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 71; Match(T__19);
				{
				State = 72; expression(0);
				}
				}
				break;
			case T__5:
			case T__7:
			case T__28:
			case T__29:
			case FloatLiteral:
			case IntLiteral:
			case StringLiteral:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73; literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 127;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 125;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new DotMemberExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 76;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 77; Match(T__4);
						State = 78; expression(18);
						}
						break;
					case 2:
						{
						_localctx = new AdditionBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 79;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 80; Match(T__5);
						State = 81; expression(17);
						}
						break;
					case 3:
						{
						_localctx = new SubstractionBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 82;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 83; Match(T__7);
						State = 84; expression(15);
						}
						break;
					case 4:
						{
						_localctx = new MultiplicationBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 85;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 86; Match(T__9);
						State = 87; expression(13);
						}
						break;
					case 5:
						{
						_localctx = new DivisionBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 88;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 89; Match(T__11);
						State = 90; expression(11);
						}
						break;
					case 6:
						{
						_localctx = new EqualBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 91;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 92; Match(T__13);
						State = 93; expression(9);
						}
						break;
					case 7:
						{
						_localctx = new NotEqualBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 94;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 95; Match(T__14);
						State = 96; expression(8);
						}
						break;
					case 8:
						{
						_localctx = new BiggerBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 97;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 98; Match(T__15);
						State = 99; expression(7);
						}
						break;
					case 9:
						{
						_localctx = new BiggerEqualBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 101; Match(T__16);
						State = 102; expression(6);
						}
						break;
					case 10:
						{
						_localctx = new SmallerBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 103;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 104; Match(T__17);
						State = 105; expression(5);
						}
						break;
					case 11:
						{
						_localctx = new SmallerEqualBinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 106;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 107; Match(T__18);
						State = 108; expression(4);
						}
						break;
					case 12:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 109;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 110; Match(T__0);
						State = 111; parameters();
						State = 112; Match(T__1);
						}
						break;
					case 13:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						{
						State = 115; Match(T__3);
						State = 116; expression(0);
						}
						}
						break;
					case 14:
						{
						_localctx = new AdditionUnaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 117;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 118; Match(T__6);
						}
						break;
					case 15:
						{
						_localctx = new SubstractionUnaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 119;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 120; Match(T__8);
						}
						break;
					case 16:
						{
						_localctx = new MultiplicationUnaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 122; Match(T__10);
						}
						break;
					case 17:
						{
						_localctx = new DivisionUnaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 124; Match(T__12);
						}
						break;
					}
					} 
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(T__20);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 131; Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(T__22);
			State = 135; expression(0);
			State = 136; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; expression(0);
			State = 139; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; declaration();
			State = 142; identifierName();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 143; Match(T__3);
				State = 144; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationBaseContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode Function() { return GetToken(DustParser.Function, 0); }
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionModifierContext[] functionModifier() {
			return GetRuleContexts<FunctionModifierContext>();
		}
		public FunctionModifierContext functionModifier(int i) {
			return GetRuleContext<FunctionModifierContext>(i);
		}
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionFragmentatorContext functionFragmentator() {
			return GetRuleContext<FunctionFragmentatorContext>(0);
		}
		public FunctionDeclarationBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationBaseContext functionDeclarationBase() {
		FunctionDeclarationBaseContext _localctx = new FunctionDeclarationBaseContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDeclarationBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; declaration();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25 || _la==T__26) {
				{
				{
				State = 148; functionModifier();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154; Match(Function);
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 159;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Identifier) {
						{
						State = 155; functionFragmentator();
						}
					}

					State = 158; functionParameterList();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 161; functionName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyBaseContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionBodyBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBodyBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionBodyBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionBodyBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBodyBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyBaseContext functionBodyBase() {
		FunctionBodyBaseContext _localctx = new FunctionBodyBaseContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionBodyBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(T__23);
			State = 165; functionBody();
			State = 166; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << T__7) | (1L << T__19) | (1L << T__20) | (1L << T__22) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << Identifier) | (1L << FloatLiteral) | (1L << IntLiteral) | (1L << StringLiteral))) != 0)) {
				{
				{
				State = 168; statement();
				State = 169; eos();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionDeclarationBaseContext functionDeclarationBase() {
			return GetRuleContext<FunctionDeclarationBaseContext>(0);
		}
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionBodyBaseContext functionBodyBase() {
			return GetRuleContext<FunctionBodyBaseContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionDeclaration);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; functionDeclarationBase();
				State = 177; functionParameterList();
				State = 178; functionBodyBase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; functionDeclarationBase();
				State = 181; functionBodyBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__0);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 192; functionParameter();
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__27) {
					{
					{
					State = 193; Match(T__27);
					State = 194; functionParameter();
					}
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 202; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionFragmentatorContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionFragmentatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionFragmentator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionFragmentator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionFragmentator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionFragmentator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionFragmentatorContext functionFragmentator() {
		FunctionFragmentatorContext _localctx = new FunctionFragmentatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionFragmentator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; identifierName();
			State = 205; functionParameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(T__20);
			State = 208; parameterName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(DustParser.Identifier, 0); }
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatContext : LiteralContext {
		public ITerminalNode FloatLiteral() { return GetToken(DustParser.FloatLiteral, 0); }
		public FloatContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : LiteralContext {
		public BoolContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : LiteralContext {
		public ITerminalNode StringLiteral() { return GetToken(DustParser.StringLiteral, 0); }
		public StringContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : LiteralContext {
		public ITerminalNode IntLiteral() { return GetToken(DustParser.IntLiteral, 0); }
		public IntContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_literal);
		int _la;
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(StringLiteral);
				}
				break;
			case 3:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5 || _la==T__7) {
					{
					State = 216;
					_la = TokenStream.LA(1);
					if ( !(_la==T__5 || _la==T__7) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 219; Match(IntLiteral);
				}
				break;
			case 4:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5 || _la==T__7) {
					{
					State = 220;
					_la = TokenStream.LA(1);
					if ( !(_la==T__5 || _la==T__7) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 223; Match(FloatLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(T__30);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << T__7) | (1L << T__19) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << Identifier) | (1L << FloatLiteral) | (1L << IntLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 227; expression(0);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__27) {
					{
					{
					State = 228; Match(T__27);
					State = 229; expression(0);
					}
					}
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 237; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(T__0);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << T__7) | (1L << T__19) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << Identifier) | (1L << FloatLiteral) | (1L << IntLiteral) | (1L << StringLiteral))) != 0)) {
				{
				State = 240; parameter();
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__27) {
					{
					{
					State = 241; Match(T__27);
					State = 242; parameter();
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 250; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(DustParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDustListener typedListener = listener as IDustListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDustVisitor<TResult> typedVisitor = visitor as IDustVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 46, RULE_eos);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				LineTerminatorAhead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 22);
		case 12: return Precpred(Context, 20);
		case 13: return Precpred(Context, 15);
		case 14: return Precpred(Context, 13);
		case 15: return Precpred(Context, 11);
		case 16: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x105', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x39', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '?', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'M', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x80', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x83', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x87', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x94', '\n', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x98', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x9B', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x9F', '\n', '\t', '\x3', '\t', '\x5', '\t', '\xA2', 
		'\n', '\t', '\x3', '\t', '\x5', '\t', '\xA5', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\xAE', '\n', '\v', '\f', '\v', '\xE', '\v', '\xB1', 
		'\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xBA', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\xC6', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xC9', '\v', '\x10', 
		'\x5', '\x10', '\xCB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xDC', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xE0', '\n', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xE3', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xE9', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\xEC', '\v', '\x16', '\x5', '\x16', '\xEE', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xF6', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xF9', '\v', '\x17', '\x5', '\x17', '\xFB', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x103', '\n', '\x19', '\x3', '\x19', '\x2', 
		'\x3', '\x6', '\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x2', '\x5', '\x3', '\x2', '\x1C', '\x1D', 
		'\x3', '\x2', '\x1F', ' ', '\x4', '\x2', '\b', '\b', '\n', '\n', '\x2', 
		'\x11A', '\x2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x4', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'L', '\x3', '\x2', '\x2', '\x2', '\b', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x8C', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x95', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xCE', '\x3', '\x2', '\x2', '\x2', '\"', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD4', '\x3', '\x2', '\x2', '\x2', '&', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xE2', '\x3', '\x2', '\x2', '\x2', '*', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF1', '\x3', '\x2', '\x2', '\x2', '.', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x5', '\x4', '\x3', '\x2', '\x33', '\x34', '\x5', '\x30', 
		'\x19', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x3', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', ':', '?', '\x5', '\xE', '\b', '\x2', ';', 
		'?', '\x5', '\f', '\a', '\x2', '<', '?', '\x5', '\x16', '\f', '\x2', '=', 
		'?', '\x5', '\n', '\x6', '\x2', '>', ':', '\x3', '\x2', '\x2', '\x2', 
		'>', ';', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\b', '\x4', '\x1', '\x2', '\x41', '\x42', '\a', '\x3', 
		'\x2', '\x2', '\x42', '\x43', '\x5', '\x6', '\x4', '\x2', '\x43', '\x44', 
		'\a', '\x4', '\x2', '\x2', '\x44', 'M', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\a', '\x5', '\x2', '\x2', '\x46', 'M', '\x5', '\x6', '\x4', '\x2', 
		'G', 'M', '\x5', '*', '\x16', '\x2', 'H', 'M', '\x5', '&', '\x14', '\x2', 
		'I', 'J', '\a', '\x16', '\x2', '\x2', 'J', 'M', '\x5', '\x6', '\x4', '\x2', 
		'K', 'M', '\x5', '(', '\x15', '\x2', 'L', '@', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x45', '\x3', '\x2', '\x2', '\x2', 'L', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', '\x81', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\f', '\x13', '\x2', '\x2', 'O', 'P', '\a', '\a', 
		'\x2', '\x2', 'P', '\x80', '\x5', '\x6', '\x4', '\x14', 'Q', 'R', '\f', 
		'\x12', '\x2', '\x2', 'R', 'S', '\a', '\b', '\x2', '\x2', 'S', '\x80', 
		'\x5', '\x6', '\x4', '\x13', 'T', 'U', '\f', '\x10', '\x2', '\x2', 'U', 
		'V', '\a', '\n', '\x2', '\x2', 'V', '\x80', '\x5', '\x6', '\x4', '\x11', 
		'W', 'X', '\f', '\xE', '\x2', '\x2', 'X', 'Y', '\a', '\f', '\x2', '\x2', 
		'Y', '\x80', '\x5', '\x6', '\x4', '\xF', 'Z', '[', '\f', '\f', '\x2', 
		'\x2', '[', '\\', '\a', '\xE', '\x2', '\x2', '\\', '\x80', '\x5', '\x6', 
		'\x4', '\r', ']', '^', '\f', '\n', '\x2', '\x2', '^', '_', '\a', '\x10', 
		'\x2', '\x2', '_', '\x80', '\x5', '\x6', '\x4', '\v', '`', '\x61', '\f', 
		'\t', '\x2', '\x2', '\x61', '\x62', '\a', '\x11', '\x2', '\x2', '\x62', 
		'\x80', '\x5', '\x6', '\x4', '\n', '\x63', '\x64', '\f', '\b', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\x12', '\x2', '\x2', '\x65', '\x80', '\x5', 
		'\x6', '\x4', '\t', '\x66', 'g', '\f', '\a', '\x2', '\x2', 'g', 'h', '\a', 
		'\x13', '\x2', '\x2', 'h', '\x80', '\x5', '\x6', '\x4', '\b', 'i', 'j', 
		'\f', '\x6', '\x2', '\x2', 'j', 'k', '\a', '\x14', '\x2', '\x2', 'k', 
		'\x80', '\x5', '\x6', '\x4', '\a', 'l', 'm', '\f', '\x5', '\x2', '\x2', 
		'm', 'n', '\a', '\x15', '\x2', '\x2', 'n', '\x80', '\x5', '\x6', '\x4', 
		'\x6', 'o', 'p', '\f', '\x18', '\x2', '\x2', 'p', 'q', '\a', '\x3', '\x2', 
		'\x2', 'q', 'r', '\x5', ',', '\x17', '\x2', 'r', 's', '\a', '\x4', '\x2', 
		'\x2', 's', '\x80', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\f', '\x16', 
		'\x2', '\x2', 'u', 'v', '\a', '\x6', '\x2', '\x2', 'v', '\x80', '\x5', 
		'\x6', '\x4', '\x2', 'w', 'x', '\f', '\x11', '\x2', '\x2', 'x', '\x80', 
		'\a', '\t', '\x2', '\x2', 'y', 'z', '\f', '\xF', '\x2', '\x2', 'z', '\x80', 
		'\a', '\v', '\x2', '\x2', '{', '|', '\f', '\r', '\x2', '\x2', '|', '\x80', 
		'\a', '\r', '\x2', '\x2', '}', '~', '\f', '\v', '\x2', '\x2', '~', '\x80', 
		'\a', '\xF', '\x2', '\x2', '\x7F', 'N', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x7F', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', 'W', '\x3', '\x2', '\x2', '\x2', '\x7F', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', ']', '\x3', '\x2', '\x2', '\x2', '\x7F', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x63', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', 'i', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x7F', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', 't', '\x3', '\x2', '\x2', '\x2', '\x7F', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', 'y', '\x3', '\x2', '\x2', '\x2', '\x7F', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', 
		'\a', '\x17', '\x2', '\x2', '\x85', '\x87', '\a', '\x18', '\x2', '\x2', 
		'\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\t', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\x19', '\x2', '\x2', '\x89', '\x8A', '\x5', '\x6', '\x4', '\x2', 
		'\x8A', '\x8B', '\x5', '\x30', '\x19', '\x2', '\x8B', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x5', '\x6', '\x4', '\x2', '\x8D', '\x8E', 
		'\x5', '\x30', '\x19', '\x2', '\x8E', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\x5', '\b', '\x5', '\x2', '\x90', '\x93', '\x5', '&', 
		'\x14', '\x2', '\x91', '\x92', '\a', '\x6', '\x2', '\x2', '\x92', '\x94', 
		'\x5', '\x6', '\x4', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x99', '\x5', '\b', '\x5', '\x2', '\x96', '\x98', 
		'\x5', '\x1C', '\xF', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\xA4', '\a', '(', '\x2', '\x2', '\x9D', '\x9F', '\x5', ' ', '\x11', 
		'\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA2', '\x5', '\x1E', '\x10', '\x2', '\xA1', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\x1A', '\xE', '\x2', '\xA4', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\x11', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 
		'\x1A', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x14', '\v', '\x2', '\xA8', 
		'\xA9', '\a', '\x1B', '\x2', '\x2', '\xA9', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '\x4', '\x3', '\x2', '\xAB', '\xAC', '\x5', 
		'\x30', '\x19', '\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x10', '\t', 
		'\x2', '\xB3', '\xB4', '\x5', '\x1E', '\x10', '\x2', '\xB4', '\xB5', '\x5', 
		'\x12', '\n', '\x2', '\xB5', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', '\x10', '\t', '\x2', '\xB7', '\xB8', '\x5', '\x12', '\n', 
		'\x2', '\xB8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '&', '\x14', 
		'\x2', '\xBC', '\x19', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', 
		'&', '\x14', '\x2', '\xBE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\t', '\x2', '\x2', '\x2', '\xC0', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xCA', '\a', '\x3', '\x2', '\x2', '\xC2', '\xC7', '\x5', 
		'\"', '\x12', '\x2', '\xC3', '\xC4', '\a', '\x1E', '\x2', '\x2', '\xC4', 
		'\xC6', '\x5', '\"', '\x12', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\a', '\x4', '\x2', '\x2', '\xCD', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\x5', '&', '\x14', '\x2', '\xCF', '\xD0', '\x5', 
		'\x1E', '\x10', '\x2', '\xD0', '!', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x17', '\x2', '\x2', '\xD2', '\xD3', '\x5', '$', '\x13', 
		'\x2', '\xD3', '#', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x5', 
		'&', '\x14', '\x2', '\xD5', '%', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\a', ')', '\x2', '\x2', '\xD7', '\'', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xE3', '\t', '\x3', '\x2', '\x2', '\xD9', '\xE3', '\a', '-', '\x2', '\x2', 
		'\xDA', '\xDC', '\t', '\x4', '\x2', '\x2', '\xDB', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xE3', '\a', ',', '\x2', '\x2', '\xDE', 
		'\xE0', '\t', '\x4', '\x2', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE3', '\a', '+', '\x2', '\x2', '\xE2', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', ')', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xED', '\a', '!', '\x2', '\x2', '\xE5', '\xEA', '\x5', '\x6', '\x4', 
		'\x2', '\xE6', '\xE7', '\a', '\x1E', '\x2', '\x2', '\xE7', '\xE9', '\x5', 
		'\x6', '\x4', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\"', '\x2', '\x2', '\xF0', '+', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xFA', 
		'\a', '\x3', '\x2', '\x2', '\xF2', '\xF7', '\x5', '.', '\x18', '\x2', 
		'\xF3', '\xF4', '\a', '\x1E', '\x2', '\x2', '\xF4', '\xF6', '\x5', '.', 
		'\x18', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x4', 
		'\x2', '\x2', '\xFD', '-', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', 
		'\x5', '\x6', '\x4', '\x2', '\xFF', '/', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x103', '\a', '\x2', '\x2', '\x3', '\x101', '\x103', '\b', '\x19', '\x1', 
		'\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x37', '>', 'L', '\x7F', '\x81', '\x86', '\x93', '\x99', '\x9E', 
		'\xA1', '\xA4', '\xAF', '\xB9', '\xC7', '\xCA', '\xDB', '\xDF', '\xE2', 
		'\xEA', '\xED', '\xF7', '\xFA', '\x102',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dust.Language
